#include "gtest/gtest.h"
#include "binary_search_tree.hpp"
 
TEST(BinaryTreeTraversalTest, MTT1) {
    // balanced tree
    Node* root1 = new Node(5);
    root1->left = new Node(3);
    root1->right = new Node(7);
    root1->left->left = new Node(1);
    root1->right->right = new Node(9);
    EXPECT_EQ(true, is_balanced(root1));
}

TEST(BinaryTreeTraversalTest, MTT2) {
    // unbalanced tree
    Node* root2 = new Node(5);
    root2->left = new Node(3);
    root2->right = new Node(7);
    root2->left->left = new Node(1);
    root2->right->right = new Node(9);
    root2->left->left->left = new Node(0);
    EXPECT_EQ(false, is_balanced(root2));
}

TEST(BinaryTreeTraversalTest, MTT3) {
    // empty tree
    Node* root3 = nullptr;
    EXPECT_EQ(true, is_balanced(root3));
}

TEST(BinaryTreeTraversalTest, MTT4) {
    // tree with only root node
    Node* root4 = new Node(5);
    EXPECT_EQ(true, is_balanced(root4));
}


////////////////////////////////Q2//////////////////////////
// Test case for Mirror
TEST(BinaryTreeTraversalTest, MT1) {
    Node* root = createNode(4);
    root->left = createNode(2);
    root->right = createNode(6);
    root->left->left = createNode(1);
    root->left->right = createNode(3);
    root->right->left = createNode(5);
    root->right->right = createNode(7);

    testing::internal::CaptureStdout();
    inOrderTraversal(root);
    std::string output = testing::internal::GetCapturedStdout();
    EXPECT_EQ(output, "1 2 3 4 5 6 7");
    Mirror(root);
    EXPECT_EQ(output, "7 6 5 4 3 2 1");
}

// Test case for Mirror
TEST(BinaryTreeTraversalTest, MT2) {
    Node* root = createNode(5);
    root->left = createNode(3);
    root->right = createNode(6);
    root->left->left = createNode(2);
    root->left->right = createNode(4);

    testing::internal::CaptureStdout();
    inOrderTraversal(root);
    std::string output = testing::internal::GetCapturedStdout();
    EXPECT_EQ(output, "2 3 4 5 6");
    Mirror(root);
    EXPECT_EQ(output, "6 5 4 3 2");
}


// Test case for Mirror
TEST(BinaryTreeTraversalTest, MT3) {
    Node* root = createNode(2);
    root->left = createNode(1);
    root->right = createNode(8);
    root->left->left = createNode(12);
    root->right->right = createNode(9);

    testing::internal::CaptureStdout();
    inOrderTraversal(root);
    std::string output = testing::internal::GetCapturedStdout();
    EXPECT_EQ(output, "12 1 2 8 9");
    Mirror(root);
    EXPECT_EQ(output, "9 8 2 1 12");
}



 